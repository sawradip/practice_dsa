
# Corner Case 1: If stack is empty or any item is popped, have to reset the minInt
class MinStack:
    def __init__(self):
        self.arr = []
        self.minInt = 2**31

    def push(self, x):
         if (x < self.minInt):
             self.minInt = x
         self.arr.append((x, self.minInt))

    def top(self):
        if self.empty():
            return None
        return self.arr[-1][0]
    
    def pop(self):
        if self.empty():
            return None
        temp =  self.arr[-1][0]
        self.arr = self.arr[:-1]

        # Reset minInt
        if self.empty():
            self.minInt = 2**31
        else:
            self.minInt = self.arr[-1][-1]
        return temp

    def size(self):
        return len(self.arr)
    
    def empty(self):
        return len(self.arr) == 0

    def getMin(self):
        return self.arr[-1][1]
    
if __name__ == "__main__":
    s = MinStack()
    s.push(2147483646)
    s.push(2147483646)
    s.push(2147483647)
    print(s.top())
    print(s.pop())
    print(s.getMin())
    print(s.pop())
    print(s.getMin())
    print(s.pop())
    s.push(2147483647)
    print(s.top())
    print(s.getMin())
    s.push(-2147483648)
    print(s.top())
    print(s.getMin())
    print(s.pop())
    print(s.getMin())

#     s.push(6)
#     s.push(3)
#     s.push(7)
#     print("Top of stack is before deleting any element", s.top())
#     print("Size of stack before deleting any element", s.size())
#     print("The element deleted is", s.pop())
#     print("Size of stack after deleting an element", s.size())
#     print("Top of stack after deleting an element", s.top())